{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ClusterStack": {
      "Description": "ECS Cluster stack name to deploy service into",
      "Type": "String"
    },
    "Environment": {
      "Description": "The environment parameter for the docker container",
      "Type": "String"
    },
    "Application": {
      "Description": "The application",
      "Type": "String"
    },
    "Role": {
      "Description": "The application",
      "Type": "String"
    },
    "VPCStack": {
      "Description": "The stack name of the vpc deployed by infra-buddy that will be the target of this cluster.",
      "Type": "String"
    },
    "ApiPath": {
      "Description": "The application load balancer path to route api calls.",
      "Type": "String"
    },
    "CertficateArn": {
      "Description": "The certificate ARN of a cert in the us-east-1 region (Cloudfront limitation).",
      "Type": "String"
    },
    "CloudfrontHostname": {
      "Description": "Hostname to serve cloudfront content from",
      "Type": "String"
    },
    "CloudfrontHostname2": {
      "Description": "Hostname to serve cloudfront content from",
      "Type": "String"
    },
    "BackendHostname": {
      "Description": "Hostname that hosts the backend API for cloudfront",
      "Type": "String"
    },
    "S3LambdaArn": {
      "Description": "ARN of Lambda function to run on the S3 bucket origin behaviors",
      "Type": "String"
    }
  },
  "Conditions": {
    "Production": {
      "Fn::Equals": [
        {
          "Ref": "Environment"
        },
        "prod"
      ]
    },
    "NoCloudfrontHostname2": {
      "Fn::Equals": [
        {
          "Ref":
          "CloudfrontHostname2"
        },
        ""
      ]
    }
  },
  "Resources": {
    "S3BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3Bucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:GetObject"],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Bucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Principal": "*"
            }
          ]
        }
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "PublicRead",
        "BucketName": {
          "Fn::Sub": "${Environment}-${Application}-${Role}-files"
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html"
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["HEAD", "GET"],
              "AllowedOrigins": ["*"],
              "MaxAge": "84600"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "Application"
            }
          },
          {
            "Key": "Role",
            "Value": {
              "Ref": "Role"
            }
          }
        ]
      }
    },
    "Cloudfront": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {"Ref": "CloudfrontHostname"},
            {
              "Fn::If": [
                "NoCloudfrontHostname2",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "Ref": "CloudfrontHostname2"
                }
              ]
            }
          ],
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Ref": "CertficateArn"
            },
            "SslSupportMethod": "sni-only",
            "MinimumProtocolVersion": "TLSv1"
          },
          "Origins": [
            {
              "Id": "bucket",
              "DomainName": {
                "Fn::GetAtt": [
                  "S3Bucket",
                  "DomainName"
                ]
              },
              "S3OriginConfig": {}
            },
            {
              "Id": "graph-bucket",
              "DomainName": {
                "Fn::Sub": "${Environment}-otxp-web-graph-ui-files.s3-website-us-west-2.amazonaws.com"
              },
              "CustomOriginConfig": {
                "HTTPPort": "80",
                "HTTPSPort": "443",
                "OriginProtocolPolicy": "http-only",
                "OriginReadTimeout" : 180
              }
            },
            {
              "Id": "otxp-web-server",
              "DomainName": {
                "Ref": "BackendHostname"
              },
              "CustomOriginConfig": {
                "HTTPPort": "80",
                "HTTPSPort": "443",
                "OriginProtocolPolicy": "https-only",
                "OriginReadTimeout" : 180
              }
            }
          ],
          "Enabled": "true",
          "DefaultRootObject": "index.html",
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT"
            ],
            "TargetOriginId": "bucket",
            "MinTTL": 60,
            "DefaultTTL": 300,
            "MaxTTL": 600,
            "ForwardedValues": {
              "QueryString": "true"
            },
            "Compress": true,
            "ViewerProtocolPolicy": "redirect-to-https",
            "LambdaFunctionAssociations": [
              {
                "EventType": "origin-response",
                "LambdaFunctionARN": {"Ref":  "S3LambdaArn"}
              }
            ]
          },
          "CacheBehaviors": [
            {
              "TargetOriginId": "graph-bucket",
              "MinTTL": 60,
              "DefaultTTL": 300,
              "MaxTTL": 600,
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "none"
                }
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/graphs*"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/_?api/v1/*"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/_?otxapi/*"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/*auth/*"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/taxii*/*"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/scratch/*"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/unsubscribe/*"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/accounts/usm/"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/sitemap/*"
            },
            {
              "TargetOriginId": "otxp-web-server",
              "MinTTL": 0,
              "DefaultTTL": 0,
              "MaxTTL": 3600,
              "AllowedMethods": [
                "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
              ],
              "ForwardedValues": {
                "QueryString": "true",
                "Cookies": {
                  "Forward": "all"
                },
                "Headers": [
                  "X-OTX-API-KEY", "Accept", "Accept-Encoding", "Authorization", "Origin", "Pragma", "Referrer", "User-Agent", "Content-Type"
                ]
              },
              "ViewerProtocolPolicy": "redirect-to-https",
              "PathPattern": "/robots.txt"
            }
          ]
        }
      }
    },

    "primarydns": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::ImportValue": {
                  "Fn::Sub": "${VPCStack}-ExternalDomain"
                }
              },
              "."
            ]
          ]
        },
        "Name": {"Ref": "CloudfrontHostname"},
        "Type": "A",
        "AliasTarget": {
          "HostedZoneId": "Z2FDTNDATAQYW2",
          "DNSName": {"Fn::GetAtt": ["Cloudfront", "DomainName"]}
        }
      }
    }
  },
  "Outputs": {
    "DomainName": {
      "Description": "The Domain name of the Cloudfront",
      "Value": {
        "Fn::GetAtt": [
          "Cloudfront",
          "DomainName"
        ]
      }
    },
    "S3BucketName": {
      "Description": "The name of the bucket used to serve the angular app.",
      "Value": {
        "Ref": "S3Bucket"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-WWW-Files"
        }
      }
    }
  }
}
